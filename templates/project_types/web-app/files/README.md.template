# {{project_name}}

{{project_description}}

## 🚀 Features

{{#each features}}
- ✅ {{this}}
{{/each}}

## 🛠️ Tech Stack

- **Frontend**: React 18 + TypeScript
- **Build Tool**: Vite
- **Styling**: {{#if features.ui_library}}Tailwind CSS{{else}}CSS Modules{{/if}}
{{#if features.routing}}- **Routing**: React Router v6{{/if}}
{{#if features.state_management}}- **State Management**: Redux Toolkit{{/if}}
{{#if features.api}}- **Data Fetching**: React Query + Axios{{/if}}
- **Testing**: Vitest + React Testing Library
- **Code Quality**: ESLint + Prettier + TypeScript

## 🏃‍♂️ Quick Start

### Prerequisites

- Node.js 18+ and npm 8+
- Git

### Installation

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd {{project_name}}
   ```

2. **Install dependencies**
   ```bash
   npm install
   ```

3. **Set up environment variables**
   ```bash
   cp .env.example .env.local
   # Edit .env.local with your configuration
   ```

4. **Start the development server**
   ```bash
   npm run dev
   ```

5. **Open your browser**
   Navigate to [http://localhost:5173](http://localhost:5173)

## 📚 Available Scripts

- `npm run dev` - Start development server
- `npm run build` - Build for production
- `npm run preview` - Preview production build
- `npm run lint` - Run ESLint
- `npm run lint:fix` - Fix ESLint issues
- `npm run format` - Format code with Prettier
- `npm run type-check` - Run TypeScript type checking
- `npm run test` - Run tests
- `npm run test:ui` - Run tests with UI
- `npm run test:coverage` - Run tests with coverage

## 📁 Project Structure

```
{{project_name}}/
├── public/                 # Static assets
├── src/
│   ├── components/         # Reusable UI components
│   ├── pages/             # Page components
{{#if features.routing}}│   ├── router/            # React Router configuration{{/if}}
{{#if features.state_management}}│   ├── store/             # Redux store configuration{{/if}}
{{#if features.api}}│   ├── services/          # API services and queries{{/if}}
│   ├── hooks/             # Custom React hooks
│   ├── utils/             # Utility functions
│   ├── types/             # TypeScript type definitions
│   ├── styles/            # Global styles
│   ├── App.tsx            # Main App component
│   └── main.tsx           # Application entry point
├── tests/                 # Test files
├── .env.example           # Environment variables template
├── .gitignore            # Git ignore rules
├── .eslintrc.json        # ESLint configuration
├── .prettierrc           # Prettier configuration
├── tsconfig.json         # TypeScript configuration
├── vite.config.ts        # Vite configuration
├── vitest.config.ts      # Vitest configuration
└── package.json          # Project dependencies and scripts
```

## 🧪 Testing

This project uses Vitest and React Testing Library for testing.

### Running Tests

```bash
# Run all tests
npm run test

# Run tests in watch mode
npm run test -- --watch

# Run tests with UI
npm run test:ui

# Run tests with coverage
npm run test:coverage
```

### Writing Tests

```typescript
import { render, screen } from '@testing-library/react'
import { describe, it, expect } from 'vitest'
import { MyComponent } from './MyComponent'

describe('MyComponent', () => {
  it('renders correctly', () => {
    render(<MyComponent />)
    expect(screen.getByText('Hello World')).toBeInTheDocument()
  })
})
```

## 🎨 Styling

{{#if features.ui_library}}
This project uses Tailwind CSS for styling. The configuration is in `tailwind.config.js`.

### Custom Styles

Add custom styles in `src/styles/globals.css` or create component-specific CSS modules.

### Dark Mode

Dark mode is configured and can be toggled using the `dark` class on the `html` element.
{{else}}
This project uses CSS Modules for component-specific styling and a global stylesheet for base styles.

### Adding Styles

1. **Component styles**: Create a `.module.css` file next to your component
2. **Global styles**: Add to `src/styles/globals.css`
3. **Utility classes**: Define reusable classes in `src/styles/utils.css`
{{/if}}

{{#if features.api}}
## 🌐 API Integration

This project uses React Query for efficient data fetching and caching.

### Example API Call

```typescript
import { useQuery } from '@tanstack/react-query'
import { api } from '../services/api'

function UserProfile({ userId }: { userId: string }) {
  const { data, isLoading, error } = useQuery({
    queryKey: ['user', userId],
    queryFn: () => api.getUser(userId),
  })

  if (isLoading) return <div>Loading...</div>
  if (error) return <div>Error loading user</div>
  
  return <div>Welcome, {data.name}!</div>
}
```

### API Configuration

Configure your API base URL and other settings in `src/services/api.ts`.
{{/if}}

{{#if features.auth}}
## 🔐 Authentication

This project includes a complete authentication system with:

- User registration and login
- Protected routes
- JWT token management
- Form validation with React Hook Form and Zod

### Usage

```typescript
import { useAuth } from '../hooks/useAuth'

function Dashboard() {
  const { user, isAuthenticated, logout } = useAuth()
  
  if (!isAuthenticated) {
    return <LoginForm />
  }
  
  return (
    <div>
      <h1>Welcome, {user.name}!</h1>
      <button onClick={logout}>Logout</button>
    </div>
  )
}
```
{{/if}}

## 🚀 Deployment

### Build for Production

```bash
npm run build
```

This creates an optimized production build in the `dist` folder.

### Deployment Options

{{#if deployment.vercel}}
#### Vercel (Recommended)

1. Push your code to GitHub
2. Connect your repository to Vercel
3. Configure environment variables
4. Deploy automatically on every push

```bash
# Using Vercel CLI
npm i -g vercel
vercel
```
{{/if}}

{{#if deployment.netlify}}
#### Netlify

1. Push your code to GitHub
2. Connect your repository to Netlify
3. Set build command: `npm run build`
4. Set publish directory: `dist`
5. Configure environment variables

```bash
# Using Netlify CLI
npm i -g netlify-cli
netlify deploy --prod
```
{{/if}}

{{#if deployment.aws}}
#### AWS S3 + CloudFront

1. Build your project: `npm run build`
2. Upload `dist` folder to S3 bucket
3. Configure CloudFront distribution
4. Set up custom domain (optional)
{{/if}}

### Environment Variables

Copy `.env.example` to `.env.local` and configure:

```env
VITE_API_URL=your_api_url
{{#if features.auth}}VITE_AUTH_SECRET=your_auth_secret{{/if}}
{{#if features.analytics}}VITE_GA_ID=your_google_analytics_id{{/if}}
```

## 🤝 Contributing

1. Fork the repository
2. Create your feature branch: `git checkout -b feature/amazing-feature`
3. Commit your changes: `git commit -m 'Add some amazing feature'`
4. Push to the branch: `git push origin feature/amazing-feature`
5. Open a pull request

### Development Guidelines

- Follow the existing code style
- Write tests for new features
- Update documentation as needed
- Ensure all tests pass before submitting

## 📝 License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

## 🆘 Support

If you encounter any issues or have questions:

1. Check the [documentation](docs/)
2. Search [existing issues](../../issues)
3. Create a [new issue](../../issues/new) if needed

---

**Happy coding! 🎉**

Built with ❤️ using the Universal AI Development Platform