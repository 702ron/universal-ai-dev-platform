[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "universal-ai-dev-platform"
version = "0.1.0"
description = "A revolutionary AI-powered development platform that evolves with the industry"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    { name = "Universal AI Dev Team", email = "team@universal-ai-dev.com" },
]
keywords = [
    "ai", 
    "development", 
    "automation", 
    "agents", 
    "orchestration",
    "adaptive",
    "predictive"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # AI and ML
    "anthropic>=0.21.0",
    "openai>=1.12.0",
    "langchain>=0.1.0",
    "langchain-community>=0.0.20",
    "transformers>=4.36.0",
    "torch>=2.1.0",
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    
    # Project analysis
    "tree-sitter>=0.21.0",
    "tree-sitter-python>=0.21.0",
    "tree-sitter-javascript>=0.21.0",
    "tree-sitter-typescript>=0.21.0",
    "tree-sitter-rust>=0.21.0",
    "tree-sitter-go>=0.21.0",
    "ast-grep>=0.15.0",
    "semgrep>=1.45.0",
    
    # Web and API
    "httpx>=0.26.0",
    "aiohttp>=3.9.0",
    "websockets>=12.0",
    "requests>=2.31.0",
    
    # Database and storage
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "redis>=5.0.0",
    "asyncpg>=0.29.0",
    "sqlite-utils>=3.35.0",
    
    # Configuration and CLI
    "click>=8.1.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
    "toml>=0.10.2",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    
    # Development tools
    "jinja2>=3.1.0",
    "gitpython>=3.1.40",
    "docker>=7.0.0",
    "kubernetes>=28.0.0",
    
    # Monitoring and observability
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "sentry-sdk>=1.38.0",
    
    # Async and concurrency
    "asyncio>=3.11.0",
    "aiofiles>=23.2.1",
    "aiodns>=3.1.0",
    
    # Testing and validation
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "coverage>=7.3.0",
    
    # Security
    "cryptography>=41.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    
    # Data processing
    "jsonschema>=4.20.0",
    "msgpack>=1.0.7",
    "orjson>=3.9.0",
    
    # Adaptive architecture dependencies
    "feedparser>=6.0.10",        # RSS/feed monitoring
    "beautifulsoup4>=4.12.0",     # Web scraping
    "schedule>=1.2.0",            # Task scheduling
    "packaging>=23.2",            # Version parsing
    "semantic-version>=2.10.0",   # Semantic versioning
]

[project.optional-dependencies]
dev = [
    "black>=23.11.0",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "bandit>=1.7.5",
    "safety>=2.4.0",
    "isort>=5.12.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-gen-files>=0.5.0",
]

cloud = [
    "boto3>=1.34.0",          # AWS
    "google-cloud-storage>=2.10.0",  # GCP
    "azure-storage-blob>=12.19.0",   # Azure
]

enterprise = [
    "celery[redis]>=5.3.0",
    "flower>=2.0.1",
    "gunicorn>=21.2.0",
    "nginx-python-module>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/universal-ai-dev-platform"
Repository = "https://github.com/yourusername/universal-ai-dev-platform.git"
Documentation = "https://universal-ai-dev-platform.readthedocs.io"
"Bug Tracker" = "https://github.com/yourusername/universal-ai-dev-platform/issues"

[project.scripts]
uai = "universal_ai_dev_platform.cli:main"
uai-server = "universal_ai_dev_platform.server:main"
uai-monitor = "universal_ai_dev_platform.monitoring:main"
uai-adapt = "universal_ai_dev_platform.adaptation:main"

[tool.hatch.build.targets.wheel]
packages = ["src/universal_ai_dev_platform"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/templates",
    "/config",
    "/scripts",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "tree_sitter.*",
    "ast_grep.*",
    "semgrep.*",
    "kubernetes.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "adaptation: marks tests as adaptation tests",
    "performance: marks tests as performance tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]